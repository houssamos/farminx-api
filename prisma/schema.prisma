// schema.prisma aligné avec le schéma SQL existant

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model regions {
  id String @id @default(uuid()) @db.Uuid
  code   String   @unique
  name   String
  departments departments[]
  agricultural_stats agricultural_stats[]
}

model departments {
  id String @id @default(uuid()) @db.Uuid
  code      String  @unique
  name      String
  region_id String @db.Uuid
  regions   regions @relation(fields: [region_id], references: [id])
  agricultural_stats agricultural_stats[]
  announcements announcements[]
}

model products {
  id String @id @default(uuid()) @db.Uuid
  name        String   @unique
  category    String
  unit        String   @default("tonne")
  code        String?  @unique
  agricultural_stats agricultural_stats[]
  price_index price_index[]
  announcements announcements[]
}

model agricultural_stats {
  id String @id @default(uuid()) @db.Uuid
  year          Int
  region_id     String? @db.Uuid
  department_id String? @db.Uuid
  product_id    String? @db.Uuid
  surface_ha    Float?
  yield_qx_ha   Float?
  production_t  Float?
  granularity   String
  regions       regions?   @relation(fields: [region_id], references: [id])
  departments   departments? @relation(fields: [department_id], references: [id])
  products      products?  @relation(fields: [product_id], references: [id])
}

model price_index {
  id String @id @default(uuid()) @db.Uuid
  product_id   String @db.Uuid
  date         DateTime
  price_euro_t Float
  source       String
  products     products @relation(fields: [product_id], references: [id])
}

model users {
  id String @id @default(uuid()) @db.Uuid
  email         String  @unique
  password_hash String
  first_name    String?
  last_name     String?
  role          String  @default("user")
  created_at    DateTime @default(now())
  email_verified Boolean @default(false)
  verification_token String?
  password_reset_token String?
  password_reset_expires DateTime?
  announcements announcements[]
  favorites     favorites[]
  notifications notifications?
}

model announcements {
  id String @id @default(uuid()) @db.Uuid
  user_id       String @db.Uuid
  product_id    String @db.Uuid
  department_id String? @db.Uuid
  title         String
  description   String?
  price         Float?
  unit          String  @default("tonne")
  quantity      Float?
  status        String  @default("active")
  created_at    DateTime @default(now())
  users         users    @relation(fields: [user_id], references: [id])
  products      products @relation(fields: [product_id], references: [id])
  departments   departments? @relation(fields: [department_id], references: [id])
  favorites     favorites[]
}

model favorites {
  id String @id @default(uuid()) @db.Uuid
  user_id         String @db.Uuid
  announcement_id String @db.Uuid
  created_at      DateTime @default(now())
  users           users        @relation(fields: [user_id], references: [id])
  announcements   announcements @relation(fields: [announcement_id], references: [id])

  @@unique([user_id, announcement_id])
}

model api_app {
  id String @id @default(uuid()) @db.Uuid
  name      String   @unique
  secret    String?
  apiKey    String?   @unique
  createdAt DateTime @default(now())
}

model notifications {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @unique @db.Uuid
  stats       Boolean  @default(false)
  marketplace Boolean  @default(false)
  created_at  DateTime @default(now())
  users       users    @relation(fields: [user_id], references: [id])
}
